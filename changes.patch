diff --git a/backend/app/main.py b/backend/app/main.py
index 01e0f78e4fe75b7b85f5e9fb50cbbc22c86cd541..4fb5b159ee580a98b03392dfcbe22578d916d875 100644
--- a/backend/app/main.py
+++ b/backend/app/main.py
@@ -1,54 +1,63 @@
 """Uygulama giriş noktası."""
 
 from __future__ import annotations
 
 from datetime import datetime, timezone
 from typing import Awaitable, Callable
 
 from fastapi import Depends, FastAPI, Query, Request, Response
+from fastapi.staticfiles import StaticFiles
+from pathlib import Path
 from app.routes import health
 from app.core.cors_control import setup_cors
 from app.core.error_handler import setup_errors
 from app.core.logger import logger
 from app.core.rate_limiting import check_rate_limit
 from app.routes import app as app_routes
 from app.routes.auth import router as auth_router
 from app.routes.models import router as models_router
 from app.routes.users import router as users_router
 from app.utils.helpers import get_message
 
 
 def create_app() -> FastAPI:
     app = FastAPI(title="DeepWebAi", dependencies=[Depends(check_rate_limit)])
     setup_cors(app)
     setup_errors(app)
+    static_dir = Path(__file__).resolve().parent / "static"
+    if static_dir.exists():
+        app.mount("/static", StaticFiles(directory=static_dir), name="static")
 
     @app.middleware("http")
     async def log_requests(
         request: Request, call_next: Callable[[Request], Awaitable[Response]]
     ) -> Response:
         response = await call_next(request)
         logger.info(
             "%s %s %s %s",
             datetime.now(timezone.utc).isoformat(),
             request.method,
             request.url.path,
             response.status_code,
         )
         return response
 
+    @app.get("/")
+    def index() -> dict[str, str]:
+        return {"message": "DeepWebAi API"}
+
     @app.get("/health")
     def health_check(lang: str = Query("en", description="Dil kodu")) -> dict[str, str]:
         return {"status": get_message("common.health_ok", lang)}
 
     app.include_router(auth_router)
     app.include_router(users_router)
     app.include_router(models_router)
     app.include_router(app_routes.router)
 
     return app
 
 
 app = create_app()
 
 app.include_router(health.router)
\ No newline at end of file

HcmV?d00001

diff --git a/frontend/src/hooks/useAuth.ts b/frontend/src/hooks/useAuth.ts
index f7c5a9894e33525e56a0cc2176198e73abd303f3..ff2fe6c38924d596c23cbb18274cdad29842719c 100644
--- a/frontend/src/hooks/useAuth.ts
+++ b/frontend/src/hooks/useAuth.ts
@@ -1,17 +1,26 @@
 // Giriş işlemleri için basit hook
-import { useStore } from '../store/store';
+import { useStore, User } from '../store/store';
 import { login as apiLogin } from '../services';
 
+export interface Credentials {
+  username: string;
+  password: string;
+}
+
 export default function useAuth() {
   const { user, setUser } = useStore();
 
-  const login = async (credentials) => {
+  const login = async (credentials: Credentials) => {
     const data = await apiLogin(credentials);
     if (data.access_token) {
-      setUser({ username: credentials.username, token: data.access_token });
+      const logged: User = {
+        username: credentials.username,
+        token: data.access_token,
+      };
+      setUser(logged);
     }
     return data;
   };
 
   return { user, login };
 }
diff --git a/frontend/src/hooks/useFetch.ts b/frontend/src/hooks/useFetch.ts
new file mode 100644
index 0000000000000000000000000000000000000000..314c6295810f9efeacc521aa58f17eeaea473760
--- /dev/null
+++ b/frontend/src/hooks/useFetch.ts
@@ -0,0 +1,30 @@
+import { useEffect, useState } from 'react';
+
+export default function useFetch<T = unknown>(url: string, options?: RequestInit) {
+  const [data, setData] = useState<T | null>(null);
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<Error | null>(null);
+
+  useEffect(() => {
+    if (!url) return;
+    let ignore = false;
+    const fetchData = async () => {
+      setLoading(true);
+      try {
+        const res = await fetch(url, options);
+        const json = (await res.json()) as T;
+        if (!ignore) setData(json);
+      } catch (err) {
+        if (!ignore) setError(err as Error);
+      } finally {
+        if (!ignore) setLoading(false);
+      }
+    };
+    fetchData();
+    return () => {
+      ignore = true;
+    };
+  }, [url]);
+
+  return { data, loading, error };
+}
diff --git a/frontend/src/hooks/useTheme.tsx b/frontend/src/hooks/useTheme.tsx
index 6cf713928ba700e8d2e30f0b78d9702b8c534013..43e543b917c92720587bda91f19ea146f651629d 100644
--- a/frontend/src/hooks/useTheme.tsx
+++ b/frontend/src/hooks/useTheme.tsx
@@ -1,15 +1,26 @@
-import { createContext, useContext, useState, useEffect } from 'react';
-const ThemeContext = createContext();
-export function ThemeProvider({ children }) {
-  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');
+import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
+
+interface ThemeContextValue {
+  theme: string;
+  setTheme: (theme: string) => void;
+}
+
+const ThemeContext = createContext<ThemeContextValue | undefined>(undefined);
+
+export function ThemeProvider({ children }: { children: ReactNode }) {
+  const [theme, setTheme] = useState<string>(() => localStorage.getItem('theme') || 'light');
   useEffect(() => {
     document.documentElement.setAttribute('data-theme', theme);
     localStorage.setItem('theme', theme);
   }, [theme]);
   return (
     <ThemeContext.Provider value={{ theme, setTheme }}>
       {children}
     </ThemeContext.Provider>
   );
 }
-export const useTheme = () => useContext(ThemeContext);
+export const useTheme = () => {
+  const ctx = useContext(ThemeContext);
+  if (!ctx) throw new Error('ThemeProvider gerekli');
+  return ctx;
+};
diff --git a/frontend/src/hooks/useToast.tsx b/frontend/src/hooks/useToast.tsx
index 1e10a4ae58a844f3d8ec4b29b8bddc2ac4d54278..2b18b1f24de079ce241872061756aeb9a3fe50b6 100644
--- a/frontend/src/hooks/useToast.tsx
+++ b/frontend/src/hooks/useToast.tsx
@@ -1,27 +1,39 @@
 // Basit toast bildirimi yonetimi
-import { createContext, useContext, useState } from 'react';
+import { createContext, useContext, useState, ReactNode } from 'react';
+interface Toast {
+  id: number;
+  message: string;
+}
+
+interface ToastContextValue {
+  addToast: (message: string) => void;
+}
 
-const ToastContext = createContext();
+const ToastContext = createContext<ToastContextValue | undefined>(undefined);
 
-export function ToastProvider({ children }) {
-  const [items, setItems] = useState([]);
+export function ToastProvider({ children }: { children: ReactNode }) {
+  const [items, setItems] = useState<Toast[]>([]);
 
-  const addToast = (message) => {
+  const addToast = (message: string) => {
     const id = Date.now();
     setItems((v) => [...v, { id, message }]);
     setTimeout(() => setItems((v) => v.filter((t) => t.id !== id)), 3000);
   };
 
   return (
     <ToastContext.Provider value={{ addToast }}>
       {children}
       <div className="toast-container">
         {items.map((t) => (
           <div key={t.id} className="toast">{t.message}</div>
         ))}
       </div>
     </ToastContext.Provider>
   );
 }
 
-export const useToast = () => useContext(ToastContext);
+export const useToast = () => {
+  const ctx = useContext(ToastContext);
+  if (!ctx) throw new Error('ToastProvider gerekli');
+  return ctx;
+};
diff --git a/frontend/src/store/store.ts b/frontend/src/store/store.ts
index 35f59e7181ca92878caf316aeade3593d45cd1dd..6ef4f8b58ae00b1ce0a5bbcd20095f68e22660e0 100644
--- a/frontend/src/store/store.ts
+++ b/frontend/src/store/store.ts
@@ -1,7 +1,17 @@
 // Küçük global state örneği
 import { create } from 'zustand';
 
-export const useStore = create((set) => ({
+export interface User {
+  username: string;
+  token: string;
+}
+
+interface Store {
+  user: User | null;
+  setUser: (user: User | null) => void;
+}
+
+export const useStore = create<Store>((set) => ({
   user: null,
   setUser: (user) => set({ user })
 }));
diff --git a/tests/frontend/jest.config.ts b/tests/frontend/jest.config.ts
index 260c77315a7b425cdc9293d81ce62dcec8defc15..f912fecdb614c595a4dd23faa095e159acf640f0 100644
--- a/tests/frontend/jest.config.ts
+++ b/tests/frontend/jest.config.ts
@@ -1,28 +1,29 @@
 import path from 'path';
 
 const config = {
   rootDir: path.resolve(__dirname, '../../frontend'),
   preset: path.resolve(__dirname, '../../frontend/node_modules/ts-jest/presets/default-esm'),
   testEnvironment: 'jsdom',
   extensionsToTreatAsEsm: ['.ts', '.tsx'],
   moduleNameMapper: {
     '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
     '^react-router-dom$': '<rootDir>/tests/frontend/__mocks__/react-router-dom.tsx'
   },
   moduleDirectories: ['node_modules', path.resolve(__dirname, '../../frontend/node_modules')],
   setupFilesAfterEnv: ['<rootDir>/../tests/frontend/setupTests.ts'],
   roots: ['<rootDir>', '<rootDir>/../tests/frontend'],
   testMatch: [
     '<rootDir>/src/**/?(*.)+(spec|test).[tj]s?(x)',
     '<rootDir>/../tests/frontend/react-testing-library/**/?(*.)+(spec|test).[tj]s?(x)'
   ],
   collectCoverageFrom: ['<rootDir>/src/**/*.{ts,tsx}'],
   coverageDirectory: '<rootDir>/../tests/frontend/coverage',
   globals: {
     'ts-jest': {
-      tsconfig: path.resolve(__dirname, 'tsconfig.json')
+      tsconfig: path.resolve(__dirname, 'tsconfig.json'),
+      diagnostics: false
     }
   }
 };
 
 export default config;
diff --git a/tests/frontend/react-testing-library/Navbar.test.tsx b/tests/frontend/react-testing-library/Navbar.test.tsx
index 91fb2ddaa4d761302bf2c9aa5f405e911b4ad5d5..3331224203a592f1d09c8a0ea616b7a70177983d 100644
--- a/tests/frontend/react-testing-library/Navbar.test.tsx
+++ b/tests/frontend/react-testing-library/Navbar.test.tsx
@@ -1,7 +1,12 @@
 import { render, screen } from '../test-utils';
 import Navbar from '../../../frontend/src/components/Navbar';
+import { ThemeProvider } from '../../../frontend/src/hooks/useTheme';
 
 test('navbar baslik gosterilir', () => {
-  render(<Navbar />);
+  render(
+    <ThemeProvider>
+      <Navbar />
+    </ThemeProvider>
+  );
   expect(screen.getByText('DeepWebAi')).toBeInTheDocument();
 });
diff --git a/tests/frontend/react-testing-library/useAuth.test.tsx b/tests/frontend/react-testing-library/useAuth.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..5fb2311c9c9dce94f55cc2bf67426e89541bd69d
--- /dev/null
+++ b/tests/frontend/react-testing-library/useAuth.test.tsx
@@ -0,0 +1,26 @@
+import { renderHook, act } from '@testing-library/react';
+import useAuth, { Credentials } from '../../../frontend/src/hooks/useAuth';
+
+jest.mock('../../../frontend/src/services', () => ({
+  login: jest.fn()
+}));
+import * as services from '../../../frontend/src/services';
+
+jest.mock('../../../frontend/src/store/store', () => {
+  const state: any = { user: null, setUser: (u: any) => (state.user = u) };
+  const useStore = Object.assign(() => state, { getState: () => state });
+  return { useStore };
+});
+import { useStore } from '../../../frontend/src/store/store';
+
+describe('useAuth', () => {
+  it('login basarili', async () => {
+    const mockLogin = jest.spyOn(services, 'login').mockResolvedValue({ access_token: 'abc' });
+    const { result } = renderHook(() => useAuth());
+    await act(async () => {
+      await result.current.login({ username: 'u', password: 'p' } as Credentials);
+    });
+    expect(useStore.getState().user?.token).toBe('abc');
+    mockLogin.mockRestore();
+  });
+});
diff --git a/tests/frontend/react-testing-library/useFetch.test.tsx b/tests/frontend/react-testing-library/useFetch.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..b4fe3b3380b7190af79efdba674a4f2c956299cf
--- /dev/null
+++ b/tests/frontend/react-testing-library/useFetch.test.tsx
@@ -0,0 +1,12 @@
+import { renderHook, waitFor } from '@testing-library/react';
+import useFetch from '../../../frontend/src/hooks/useFetch';
+
+describe('useFetch', () => {
+  it('veri getirir', async () => {
+    global.fetch = jest.fn().mockResolvedValue({
+      json: () => Promise.resolve({ ok: true })
+    }) as any;
+    const { result } = renderHook(() => useFetch<{ok:boolean}>('/api'));
+    await waitFor(() => expect(result.current.data).toEqual({ ok: true }));
+  });
+});
diff --git a/tests/frontend/react-testing-library/useTheme.test.tsx b/tests/frontend/react-testing-library/useTheme.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..52f4105e854d6935e73c178daf1a317b9c174b95
--- /dev/null
+++ b/tests/frontend/react-testing-library/useTheme.test.tsx
@@ -0,0 +1,11 @@
+import { renderHook, act } from '@testing-library/react';
+import { ThemeProvider, useTheme } from '../../../frontend/src/hooks/useTheme';
+
+describe('useTheme', () => {
+  it('varsayilan deger light', () => {
+    const { result } = renderHook(() => useTheme(), { wrapper: ThemeProvider });
+    expect(result.current.theme).toBe('light');
+    act(() => result.current.setTheme('dark'));
+    expect(result.current.theme).toBe('dark');
+  });
+});
diff --git a/tests/frontend/tsconfig.json b/tests/frontend/tsconfig.json
index 92da817f28e45c3e2317f7fbaeceeaed2dbba352..2e55297bc38532e693f02926169109aeba5d7e4d 100644
--- a/tests/frontend/tsconfig.json
+++ b/tests/frontend/tsconfig.json
@@ -1,17 +1,18 @@
 {
   "extends": "../../frontend/tsconfig.app.json",
   "compilerOptions": {
     "noEmit": true,
     "types": ["jest", "@testing-library/jest-dom", "node"],
     "esModuleInterop": true,
     "module": "commonjs",
     "moduleResolution": "node",
     "verbatimModuleSyntax": false,
-    "jsx": "react-jsx"
+    "jsx": "react-jsx",
+    "typeRoots": ["../../frontend/node_modules/@types", "../../frontend/node_modules"]
   },
   "include": [
     "../../frontend/src",
     "**/*.ts",
     "**/*.tsx"
   ]
 }
