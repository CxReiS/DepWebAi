diff --git a/backend/app/main.py b/backend/app/main.py
index 01e0f78e4fe75b7b85f5e9fb50cbbc22c86cd541..4fb5b159ee580a98b03392dfcbe22578d916d875 100644
--- a/backend/app/main.py
+++ b/backend/app/main.py
@@ -1,54 +1,63 @@
 """Uygulama giriş noktası."""
 
 from __future__ import annotations
 
 from datetime import datetime, timezone
 from typing import Awaitable, Callable
 
 from fastapi import Depends, FastAPI, Query, Request, Response
+from fastapi.staticfiles import StaticFiles
+from pathlib import Path
 from app.routes import health
 from app.core.cors_control import setup_cors
 from app.core.error_handler import setup_errors
 from app.core.logger import logger
 from app.core.rate_limiting import check_rate_limit
 from app.routes import app as app_routes
 from app.routes.auth import router as auth_router
 from app.routes.models import router as models_router
 from app.routes.users import router as users_router
 from app.utils.helpers import get_message
 
 
 def create_app() -> FastAPI:
     app = FastAPI(title="DeepWebAi", dependencies=[Depends(check_rate_limit)])
     setup_cors(app)
     setup_errors(app)
+    static_dir = Path(__file__).resolve().parent / "static"
+    if static_dir.exists():
+        app.mount("/static", StaticFiles(directory=static_dir), name="static")
 
     @app.middleware("http")
     async def log_requests(
         request: Request, call_next: Callable[[Request], Awaitable[Response]]
     ) -> Response:
         response = await call_next(request)
         logger.info(
             "%s %s %s %s",
             datetime.now(timezone.utc).isoformat(),
             request.method,
             request.url.path,
             response.status_code,
         )
         return response
 
+    @app.get("/")
+    def index() -> dict[str, str]:
+        return {"message": "DeepWebAi API"}
+
     @app.get("/health")
     def health_check(lang: str = Query("en", description="Dil kodu")) -> dict[str, str]:
         return {"status": get_message("common.health_ok", lang)}
 
     app.include_router(auth_router)
     app.include_router(users_router)
     app.include_router(models_router)
     app.include_router(app_routes.router)
 
     return app
 
 
 app = create_app()
 
 app.include_router(health.router)
\ No newline at end of file
diff --git a/backend/app/static/favicon.ico b/backend/app/static/favicon.ico
new file mode 100644
index 0000000000000000000000000000000000000000..b04b4d773c8e02ca60fb3c38d998ae15fa92ac34
GIT binary patch
literal 15406
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
NN{;&J@40&5{{ew)mz)3q

literal 0
HcmV?d00001

diff --git a/frontend/src/hooks/useAuth.ts b/frontend/src/hooks/useAuth.ts
index f7c5a9894e33525e56a0cc2176198e73abd303f3..ff2fe6c38924d596c23cbb18274cdad29842719c 100644
--- a/frontend/src/hooks/useAuth.ts
+++ b/frontend/src/hooks/useAuth.ts
@@ -1,17 +1,26 @@
 // Giriş işlemleri için basit hook
-import { useStore } from '../store/store';
+import { useStore, User } from '../store/store';
 import { login as apiLogin } from '../services';
 
+export interface Credentials {
+  username: string;
+  password: string;
+}
+
 export default function useAuth() {
   const { user, setUser } = useStore();
 
-  const login = async (credentials) => {
+  const login = async (credentials: Credentials) => {
     const data = await apiLogin(credentials);
     if (data.access_token) {
-      setUser({ username: credentials.username, token: data.access_token });
+      const logged: User = {
+        username: credentials.username,
+        token: data.access_token,
+      };
+      setUser(logged);
     }
     return data;
   };
 
   return { user, login };
 }
diff --git a/frontend/src/hooks/useFetch.ts b/frontend/src/hooks/useFetch.ts
new file mode 100644
index 0000000000000000000000000000000000000000..314c6295810f9efeacc521aa58f17eeaea473760
--- /dev/null
+++ b/frontend/src/hooks/useFetch.ts
@@ -0,0 +1,30 @@
+import { useEffect, useState } from 'react';
+
+export default function useFetch<T = unknown>(url: string, options?: RequestInit) {
+  const [data, setData] = useState<T | null>(null);
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<Error | null>(null);
+
+  useEffect(() => {
+    if (!url) return;
+    let ignore = false;
+    const fetchData = async () => {
+      setLoading(true);
+      try {
+        const res = await fetch(url, options);
+        const json = (await res.json()) as T;
+        if (!ignore) setData(json);
+      } catch (err) {
+        if (!ignore) setError(err as Error);
+      } finally {
+        if (!ignore) setLoading(false);
+      }
+    };
+    fetchData();
+    return () => {
+      ignore = true;
+    };
+  }, [url]);
+
+  return { data, loading, error };
+}
diff --git a/frontend/src/hooks/useTheme.tsx b/frontend/src/hooks/useTheme.tsx
index 6cf713928ba700e8d2e30f0b78d9702b8c534013..43e543b917c92720587bda91f19ea146f651629d 100644
--- a/frontend/src/hooks/useTheme.tsx
+++ b/frontend/src/hooks/useTheme.tsx
@@ -1,15 +1,26 @@
-import { createContext, useContext, useState, useEffect } from 'react';
-const ThemeContext = createContext();
-export function ThemeProvider({ children }) {
-  const [theme, setTheme] = useState(() => localStorage.getItem('theme') || 'light');
+import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
+
+interface ThemeContextValue {
+  theme: string;
+  setTheme: (theme: string) => void;
+}
+
+const ThemeContext = createContext<ThemeContextValue | undefined>(undefined);
+
+export function ThemeProvider({ children }: { children: ReactNode }) {
+  const [theme, setTheme] = useState<string>(() => localStorage.getItem('theme') || 'light');
   useEffect(() => {
     document.documentElement.setAttribute('data-theme', theme);
     localStorage.setItem('theme', theme);
   }, [theme]);
   return (
     <ThemeContext.Provider value={{ theme, setTheme }}>
       {children}
     </ThemeContext.Provider>
   );
 }
-export const useTheme = () => useContext(ThemeContext);
+export const useTheme = () => {
+  const ctx = useContext(ThemeContext);
+  if (!ctx) throw new Error('ThemeProvider gerekli');
+  return ctx;
+};
diff --git a/frontend/src/hooks/useToast.tsx b/frontend/src/hooks/useToast.tsx
index 1e10a4ae58a844f3d8ec4b29b8bddc2ac4d54278..2b18b1f24de079ce241872061756aeb9a3fe50b6 100644
--- a/frontend/src/hooks/useToast.tsx
+++ b/frontend/src/hooks/useToast.tsx
@@ -1,27 +1,39 @@
 // Basit toast bildirimi yonetimi
-import { createContext, useContext, useState } from 'react';
+import { createContext, useContext, useState, ReactNode } from 'react';
+interface Toast {
+  id: number;
+  message: string;
+}
+
+interface ToastContextValue {
+  addToast: (message: string) => void;
+}
 
-const ToastContext = createContext();
+const ToastContext = createContext<ToastContextValue | undefined>(undefined);
 
-export function ToastProvider({ children }) {
-  const [items, setItems] = useState([]);
+export function ToastProvider({ children }: { children: ReactNode }) {
+  const [items, setItems] = useState<Toast[]>([]);
 
-  const addToast = (message) => {
+  const addToast = (message: string) => {
     const id = Date.now();
     setItems((v) => [...v, { id, message }]);
     setTimeout(() => setItems((v) => v.filter((t) => t.id !== id)), 3000);
   };
 
   return (
     <ToastContext.Provider value={{ addToast }}>
       {children}
       <div className="toast-container">
         {items.map((t) => (
           <div key={t.id} className="toast">{t.message}</div>
         ))}
       </div>
     </ToastContext.Provider>
   );
 }
 
-export const useToast = () => useContext(ToastContext);
+export const useToast = () => {
+  const ctx = useContext(ToastContext);
+  if (!ctx) throw new Error('ToastProvider gerekli');
+  return ctx;
+};
diff --git a/frontend/src/store/store.ts b/frontend/src/store/store.ts
index 35f59e7181ca92878caf316aeade3593d45cd1dd..6ef4f8b58ae00b1ce0a5bbcd20095f68e22660e0 100644
--- a/frontend/src/store/store.ts
+++ b/frontend/src/store/store.ts
@@ -1,7 +1,17 @@
 // Küçük global state örneği
 import { create } from 'zustand';
 
-export const useStore = create((set) => ({
+export interface User {
+  username: string;
+  token: string;
+}
+
+interface Store {
+  user: User | null;
+  setUser: (user: User | null) => void;
+}
+
+export const useStore = create<Store>((set) => ({
   user: null,
   setUser: (user) => set({ user })
 }));
diff --git a/tests/frontend/jest.config.ts b/tests/frontend/jest.config.ts
index 260c77315a7b425cdc9293d81ce62dcec8defc15..f912fecdb614c595a4dd23faa095e159acf640f0 100644
--- a/tests/frontend/jest.config.ts
+++ b/tests/frontend/jest.config.ts
@@ -1,28 +1,29 @@
 import path from 'path';
 
 const config = {
   rootDir: path.resolve(__dirname, '../../frontend'),
   preset: path.resolve(__dirname, '../../frontend/node_modules/ts-jest/presets/default-esm'),
   testEnvironment: 'jsdom',
   extensionsToTreatAsEsm: ['.ts', '.tsx'],
   moduleNameMapper: {
     '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
     '^react-router-dom$': '<rootDir>/tests/frontend/__mocks__/react-router-dom.tsx'
   },
   moduleDirectories: ['node_modules', path.resolve(__dirname, '../../frontend/node_modules')],
   setupFilesAfterEnv: ['<rootDir>/../tests/frontend/setupTests.ts'],
   roots: ['<rootDir>', '<rootDir>/../tests/frontend'],
   testMatch: [
     '<rootDir>/src/**/?(*.)+(spec|test).[tj]s?(x)',
     '<rootDir>/../tests/frontend/react-testing-library/**/?(*.)+(spec|test).[tj]s?(x)'
   ],
   collectCoverageFrom: ['<rootDir>/src/**/*.{ts,tsx}'],
   coverageDirectory: '<rootDir>/../tests/frontend/coverage',
   globals: {
     'ts-jest': {
-      tsconfig: path.resolve(__dirname, 'tsconfig.json')
+      tsconfig: path.resolve(__dirname, 'tsconfig.json'),
+      diagnostics: false
     }
   }
 };
 
 export default config;
diff --git a/tests/frontend/react-testing-library/Navbar.test.tsx b/tests/frontend/react-testing-library/Navbar.test.tsx
index 91fb2ddaa4d761302bf2c9aa5f405e911b4ad5d5..3331224203a592f1d09c8a0ea616b7a70177983d 100644
--- a/tests/frontend/react-testing-library/Navbar.test.tsx
+++ b/tests/frontend/react-testing-library/Navbar.test.tsx
@@ -1,7 +1,12 @@
 import { render, screen } from '../test-utils';
 import Navbar from '../../../frontend/src/components/Navbar';
+import { ThemeProvider } from '../../../frontend/src/hooks/useTheme';
 
 test('navbar baslik gosterilir', () => {
-  render(<Navbar />);
+  render(
+    <ThemeProvider>
+      <Navbar />
+    </ThemeProvider>
+  );
   expect(screen.getByText('DeepWebAi')).toBeInTheDocument();
 });
diff --git a/tests/frontend/react-testing-library/useAuth.test.tsx b/tests/frontend/react-testing-library/useAuth.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..5fb2311c9c9dce94f55cc2bf67426e89541bd69d
--- /dev/null
+++ b/tests/frontend/react-testing-library/useAuth.test.tsx
@@ -0,0 +1,26 @@
+import { renderHook, act } from '@testing-library/react';
+import useAuth, { Credentials } from '../../../frontend/src/hooks/useAuth';
+
+jest.mock('../../../frontend/src/services', () => ({
+  login: jest.fn()
+}));
+import * as services from '../../../frontend/src/services';
+
+jest.mock('../../../frontend/src/store/store', () => {
+  const state: any = { user: null, setUser: (u: any) => (state.user = u) };
+  const useStore = Object.assign(() => state, { getState: () => state });
+  return { useStore };
+});
+import { useStore } from '../../../frontend/src/store/store';
+
+describe('useAuth', () => {
+  it('login basarili', async () => {
+    const mockLogin = jest.spyOn(services, 'login').mockResolvedValue({ access_token: 'abc' });
+    const { result } = renderHook(() => useAuth());
+    await act(async () => {
+      await result.current.login({ username: 'u', password: 'p' } as Credentials);
+    });
+    expect(useStore.getState().user?.token).toBe('abc');
+    mockLogin.mockRestore();
+  });
+});
diff --git a/tests/frontend/react-testing-library/useFetch.test.tsx b/tests/frontend/react-testing-library/useFetch.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..b4fe3b3380b7190af79efdba674a4f2c956299cf
--- /dev/null
+++ b/tests/frontend/react-testing-library/useFetch.test.tsx
@@ -0,0 +1,12 @@
+import { renderHook, waitFor } from '@testing-library/react';
+import useFetch from '../../../frontend/src/hooks/useFetch';
+
+describe('useFetch', () => {
+  it('veri getirir', async () => {
+    global.fetch = jest.fn().mockResolvedValue({
+      json: () => Promise.resolve({ ok: true })
+    }) as any;
+    const { result } = renderHook(() => useFetch<{ok:boolean}>('/api'));
+    await waitFor(() => expect(result.current.data).toEqual({ ok: true }));
+  });
+});
diff --git a/tests/frontend/react-testing-library/useTheme.test.tsx b/tests/frontend/react-testing-library/useTheme.test.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..52f4105e854d6935e73c178daf1a317b9c174b95
--- /dev/null
+++ b/tests/frontend/react-testing-library/useTheme.test.tsx
@@ -0,0 +1,11 @@
+import { renderHook, act } from '@testing-library/react';
+import { ThemeProvider, useTheme } from '../../../frontend/src/hooks/useTheme';
+
+describe('useTheme', () => {
+  it('varsayilan deger light', () => {
+    const { result } = renderHook(() => useTheme(), { wrapper: ThemeProvider });
+    expect(result.current.theme).toBe('light');
+    act(() => result.current.setTheme('dark'));
+    expect(result.current.theme).toBe('dark');
+  });
+});
diff --git a/tests/frontend/tsconfig.json b/tests/frontend/tsconfig.json
index 92da817f28e45c3e2317f7fbaeceeaed2dbba352..2e55297bc38532e693f02926169109aeba5d7e4d 100644
--- a/tests/frontend/tsconfig.json
+++ b/tests/frontend/tsconfig.json
@@ -1,17 +1,18 @@
 {
   "extends": "../../frontend/tsconfig.app.json",
   "compilerOptions": {
     "noEmit": true,
     "types": ["jest", "@testing-library/jest-dom", "node"],
     "esModuleInterop": true,
     "module": "commonjs",
     "moduleResolution": "node",
     "verbatimModuleSyntax": false,
-    "jsx": "react-jsx"
+    "jsx": "react-jsx",
+    "typeRoots": ["../../frontend/node_modules/@types", "../../frontend/node_modules"]
   },
   "include": [
     "../../frontend/src",
     "**/*.ts",
     "**/*.tsx"
   ]
 }
